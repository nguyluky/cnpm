generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  username     String      @unique
  email        String      @unique
  passwordHash String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  Report       Report[]
  Schedule     Schedule[]
  Student      Student?
  UserRoles    UserRoles[]
}

model Permission {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  RolePermissions RolePermissions[]
}

model RolePermissions {
  roleId       Int
  permissionId Int
  Permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  Roles        Roles      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@index([permissionId], map: "RolePermissions_permissionId_fkey")
}

model Roles {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  RolePermissions RolePermissions[]
  UserRoles       UserRoles[]
}

model UserRoles {
  userId String
  roleId Int
  Roles  Roles  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId], map: "UserRoles_roleId_fkey")
}

model Bus {
  id           String      @id
  licensePlate String      @unique(map: "licensePlate")
  capacity     Int
  status       Bus_status? @default(ACTIVE)
  meta         Json?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  Schedule     Schedule[]
}

model Report {
  id          String   @id
  reportType  String   @db.VarChar(100)
  description String   @db.Text
  timestamp   DateTime
  reporterId  String
  tripId      String?
  meta        Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  User        User     @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  Trip        Trip?    @relation(fields: [tripId], references: [id])

  @@index([reporterId], map: "Report_reporterId_fkey")
  @@index([tripId], map: "Report_tripId_fkey")
}

model Route {
  id                String              @id
  name              String
  estimatedDuration Int?                @default(0)
  startLocation     Json
  endLocation       Json
  isActive          Boolean?            @default(true)
  meta              Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  RouteStopPoint    RouteStopPoint[]
  Schedule          Schedule[]
  StudentAssignment StudentAssignment[]
}

model Schedule {
  id         String           @id
  routeId    String
  busId      String
  driverId   String
  type       Schedule_type
  daysOfWeek Json
  startTime  DateTime         @db.Time(0)
  startDate  DateTime         @db.Date
  endDate    DateTime         @db.Date
  status     Schedule_status? @default(ACTIVE)
  meta       Json?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now())
  Bus        Bus              @relation(fields: [busId], references: [id], onDelete: Cascade)
  User       User             @relation(fields: [driverId], references: [id], onDelete: Cascade)
  Route      Route            @relation(fields: [routeId], references: [id], onDelete: Cascade)
  Trip       Trip[]

  @@index([busId], map: "Schedule_busId_fkey")
  @@index([driverId], map: "Schedule_driverId_fkey")
  @@index([routeId], map: "Schedule_routeId_fkey")
}

model StopPoint {
  id                String              @id
  name              String
  location          Json
  meta              Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  RouteStopPoint    RouteStopPoint[]
  StudentAssignment StudentAssignment[]
  TripStop          TripStop[]
}

model Student {
  id                String              @id
  name              String
  meta              Json?
  userId            String              @unique(map: "userId")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  User              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  StudentAssignment StudentAssignment[]
  StudentAttendance StudentAttendance[]
}

model StudentAttendance {
  id          String                    @id
  tripId      String
  studentId   String
  pickupTime  DateTime?
  dropoffTime DateTime?
  status      StudentAttendance_status? @default(PENDING)
  Student     Student                   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  Trip        Trip                      @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([studentId], map: "StudentAttendance_studentId_fkey")
  @@index([tripId], map: "StudentAttendance_tripId_fkey")
}

model TrackingBusHistory {
  id        String   @id
  tripId    String
  timestamp DateTime
  location  Json
  Trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId], map: "TrackingBusHistory_tripId_fkey")
}

model StudentAssignment {
  id            String                      @id
  studentId     String
  routeId       String
  stopId        String
  direction     StudentAssignment_direction
  effectiveFrom DateTime                    @db.Date
  effectiveTo   DateTime?                   @db.Date
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @default(now())
  Route         Route                       @relation(fields: [routeId], references: [id], onDelete: Cascade)
  StopPoint     StopPoint                   @relation(fields: [stopId], references: [id], onDelete: Cascade)
  Student       Student                     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([routeId], map: "StudentAssignment_routeId_fkey")
  @@index([stopId], map: "StudentAssignment_stopId_fkey")
  @@index([studentId], map: "StudentAssignment_studentId_fkey")
}

model Trip {
  id                 String               @id
  scheduleId         String
  date               DateTime             @db.Date
  actualStartTime    DateTime?
  actualEndTime      DateTime?
  status             Trip_status?         @default(PLANNED)
  currentStopId      String?
  location           Json?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  Report             Report[]
  StudentAttendance  StudentAttendance[]
  TrackingBusHistory TrackingBusHistory[]
  Schedule           Schedule             @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  TripStop           TripStop[]

  @@index([scheduleId], map: "Trip_scheduleId_fkey")
}

model TripStop {
  id              String           @id
  tripId          String
  stopId          String
  actualArrival   DateTime?
  actualDeparture DateTime?
  status          TripStop_status? @default(PENDING)
  StopPoint       StopPoint        @relation(fields: [stopId], references: [id], onDelete: Cascade)
  Trip            Trip             @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([stopId], map: "TripStop_stopId_fkey")
  @@index([tripId], map: "TripStop_tripId_fkey")
}

model RouteStopPoint {
  id          Int       @id @default(autoincrement())
  routeId     String
  stopPointId String
  sequence    Int
  Route       Route     @relation(fields: [routeId], references: [id], onDelete: Cascade)
  StopPoint   StopPoint @relation(fields: [stopPointId], references: [id], onDelete: Cascade)

  @@index([routeId], map: "RouteStopPoint_routeId_fkey")
  @@index([stopPointId], map: "RouteStopPoint_stopPointId_fkey")
}

enum Bus_status {
  ACTIVE
  MAINTENANCE
}

enum Schedule_type {
  MORNING
  AFTERNOON
}

enum StudentAssignment_direction {
  PICKUP
  DROPOFF
}

enum StudentAttendance_status {
  PENDING
  PICKED_UP
  DROPPED_OFF
  MISSED
}

enum Trip_status {
  PLANNED
  ONGOING
  COMPLETED
  CANCELLED
}

enum TripStop_status {
  PENDING
  ARRIVED
  DONE
  SKIPPED
}

enum Schedule_status {
  ACTIVE
  INACTIVE
}
